<?php

/**
 * @file
 * Custom drupal boilerplate module.
 *
 * Created by: Topsitemakers
 * http://www.topsitemakers.com/
 */

/**
 * Constant variables.
 */
// Sample constant variable placeholder.
define('BOILERPLATE_PLACEHOLDER', 'value');

/**
 * Implements hook_help().
 */
function boilerplate_help($path, $arg) {
  switch ($path) {

    // This is displayed in the main admin help page.
    case 'admin/help#boilerplate':
      $output  = '<h2>' . t('Sample help page') . '</h2>';
      $output .= '<p>' . t('This page should contain instructions about the module usage and configuration options.') . '</p>';
      $output .= '<p>' . t('If the module integrates with other modules, they should be listed here together with some basic explanation on how to do so.') . '</p>';
      $output .= '<p>' . t('<a href="@link">On this page</a> you can see custom help added to a system path.', array('@link' => url('admin/structure/types'))) . '</p>';
      // Leave an empty paragraph to space out the permissions box.
      $output .= '<p>&nbsp;</p>';
      return $output;

    // This is displayed on a custom path (content types).
    case 'admin/structure/types':
      $output  = '<h2>' . t('Sample help - view content types') . '</h2>';
      $output .= '<p>' . t('On this page you can see available content types and create new ones if necessary.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_menu().
 */
function boilerplate_menu() {
  $items['boilerplate'] = array(
    'page callback' => 'boilerplate_sample_page_callback',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'boilerplate.pages.inc',
  );
  $items['boilerplate/form'] = array(
    'title' => 'Sample form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boilerplate_sample_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'boilerplate.forms.inc',
  );
  $items['boilerplate/arguments/%/%'] = array(
    'page callback' => 'boilerplate_sample_page_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'boilerplate.pages.inc',
  );
  $items['admin/config/boilerplate'] = array(
    'title' => 'Boilerplate settings',
    'page callback' => 'system_admin_menu_block_page',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
    'weight' => -30,
  );
  $items['admin/config/boilerplate/settings'] = array(
    'title' => 'Sample settings page',
    'description' => 'This is a sample configuration page generated from the Boilerplate module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boilerplate_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'boilerplate.admin.inc',
  );
  $items['admin/config/boilerplate/batch'] = array(
    'title' => 'Sample batch process',
    'description' => 'This is a sample page that will initiate a batch process',
    'page callback' => 'boilerplate_batch_init',
    'access arguments' => array('administer content'),
    'file' => 'boilerplate.batch.inc',
  );
  $items['user/%user/boilerplate'] = array(
    'title' => 'Sample local task',
    'page callback' => 'boilerplate_local_task_user',
    'page arguments' => array(1),
    'access arguments' => array('administer content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'boilerplate.pages.inc',
    'weight' => 100,
  );
  $items['node/%node/boilerplate'] = array(
    'title' => 'Sample local task',
    'page callback' => 'boilerplate_local_task_node',
    'page arguments' => array(1),
    'access arguments' => array('administer content'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'boilerplate.pages.inc',
    'weight' => 100,
  );
  
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function boilerplate_admin_paths() {
  return array(
    // This is just a sample page that shows how to declare administrative
    // paths.
    'arguments/*' => TRUE,
    // Use administrative theme when editing panel nodes.
    'node/*/panel_layout' => TRUE
  );
}

/**
 * Implements hook_permission().
 */
function boilerplate_permission() {
  return array(
    'sample permission' => array(
      'title' => t('Sample permission rule'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function boilerplate_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'boilerplate') . '/views',
  );
}

/**
 * Implements hook_cron().
 */
function boilerplate_cron() {

  // In order to avoid situation when the operation is called multiple times,
  // before processing our operations we will make sure that the operation is
  // not already running by acquiring the cron lock.
  // This is important in cases when the cron runs are very frequent, e.g. every
  // minute.
  if (lock_acquire('boilerplate_cron_lock')) {
    watchdog('boilerplate_cron', 'Cron hook executed.');
    // Release the lock, so the next cron run can continue running the process.
    lock_release('boilerplate_cron_lock');
  }

}

/**
 * Implements hook_block_info().
 */
function boilerplate_block_info() {
  $blocks['sample']['info'] = t('Sample block');
  $blocks['sample']['properties']['administrative'] = TRUE;
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function boilerplate_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sample':
      $block['subject'] = NULL;
      $block['content'] = '<p>' . t('Sample block content') . '</p>';
      if (user_access('sample permission')) {
        $block['content'] .= '<p>' . t('This text is visible only to certain roles.') . '</p>';
      }

      return $block;
  }
}

/**
 * Implements hook_block_configure().
 */
function boilerplate_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'sample':
      $form['boilerplate_block_count'] = array(
        '#type' => 'select',
        '#title' => t('Sample counting'),
        '#default_value' => variable_get('boilerplate_block_count', 10),
        '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),
      );

      return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function boilerplate_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'sample':
      variable_set('boilerplate_block_count', $edit['boilerplate_block_count']);
      break;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function boilerplate_preprocess_page(&$vars) {

  // 

}

/**
 * Implements hook_preprocess_node().
 */
function boilerplate_preprocess_node(&$vars) {

  /**
   * Per content type preprocessing.
   */
  switch ($vars['node']->type) {
    
    // Pages.
    case 'page':
      break;

  }

}

/**
 * Implements hook_preprocess_field().
 */
function boilerplate_preprocess_field(&$vars) {

  /**
   * Per field preprocessing.
   */
  switch ($vars['element']['#field_name']) {

    // Sample field.
    case 'field_sample_field':
      $vars['items'][0]['#markup'] = t('Overridden value.');
      break;

  }

  /**
   * Per content type preprocessing.
   */
  if ($vars['element']['#entity_type'] == 'node') {
    switch ($vars['element']['#object']->type) {

      // Pages.
      case 'page':
        if ($vars['element']['#field_name'] == 'field_sample_field') {
          $vars['items'][0]['#markup'] = t('Overridden based on content type.');
        }
        break;

    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function boilerplate_preprocess_block(&$vars) {

  // 

}

/**
 * Implements hook_form_alter().
 */
function boilerplate_form_alter(&$form, &$form_state, $form_id) {

  /**
   * General overrides.
   */
  switch ($form['#id']) {

    // Node comment form.
    case 'comment-form':
      // Remove the "Your name" field; unnecessary if the site is using Ultima.
      unset($form['author']['_author']);
      // Redirect back to the node form if there is a validation error on form
      // submission. This is to avoid having separate page where the comment is
      // displayed right under the node.
      $form['#action'] = url('node/' . $form['#node']->nid);
      break;

    // User login form.
    case 'user-login':
      // Remove default descriptions.
      unset($form['name']['#description']);
      unset($form['pass']['#description']);
      break;

    // User registration form.
    case 'user-register-form':
      break;

    // User reset password form.
    case 'user-pass':
      break;

    // Site contact form.
    case 'contact-site-form':
      break;

  }

  /**
   * Specific overrides.
   */
  switch ($form_id) {

    // Node type form.
    case 'node_type_form':
      // Automatically check the "Revisioning" checkbox for all new content
      // types.
      if (isset($form['#node_type']->is_new)) {
        $form['workflow']['node_options']['#default_value'][] = 'revision';
      }
      break;

    // Panels edit form.
    case 'panels_edit_display_form':
      // Remove "Live preview"
      $form['preview']['#access'] = false;
      break;

    // Taxonomy term and vocabulary forms.
    case 'taxonomy_form_term':
    case 'taxonomy_form_vocabulary':
      // Remove the body field (description) fields.
      $form['description']['#access'] = FALSE;
      break;

    // Example override for node comment form.
    case 'comment_node_type_form':
      break;

    // Sample webform custom validation.
    case 'webform_client_form_1':
      $form['#validate'][] = '_boilerplate_validate_webform';
      $first = array_shift($form['#submit']);
      array_unshift($form['#submit'], $first, '_boilerplate_validate_webform');
      break;
      
    // User edit page.
    case 'user_profile_form':
      break;
      
  }

}

/**
 * Implements hook_theme().
 */
function boilerplate_theme($existing, $type, $theme, $path) {
  // Get the path to this module and define theme dir.
  $module_path = drupal_get_path('module', 'boilerplate');
  $theme_dir   = $module_path . '/theme';
  
  // Themable elements.
  return array(
    'sample-template' => array(
      'template' => 'sample-template',
      'variables' => array('content' => NULL),
      'path' => $theme_dir,
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function boilerplate_page_alter(&$page) {

  // Add custom setting accessible in JS through
  // Drupal.settings.boilerplate.sampleVar.
  drupal_add_js(array('boilerplate' => array('sampleVar' => t('Custom value'))), array('type' => 'setting'));

  // Add content to the end of the page.
  $page['page_bottom']['boilerplate'] = array(
    '#type' => 'markup',
    '#markup' => '<!-- This content will be added to the end of the page. -->',
  );

}

/**
 * Implements hook_mail().
 */
function boilerplate_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array(
    '!site-name' => variable_get('site_name', 'Drupal'),
    '!subject'   => $params['subject'],
  );
  switch ($key) {
    case 'sample_text_mail':
      $message['subject'] .= t('!subject', $variables, array('langcode' => $language->language));
      $message['body'][] = t('Just a sample email sent from !site-name to demonstrate the hook_mail() function.', $variables, array('langcode' => $language->language));
      $message['body'][] = $params['message'];
      break;

    case 'sample_html_mail':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] .= t('!subject', $variables, array('langcode' => $language->language));
      $message['body'][] = t('Just a sample <b>HTML</b> <i>email</i> sent from !site-name to demonstrate the hook_mail() function.', $variables, array('langcode' => $language->language));
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements of hook_user_view().
 *
 * Adds a custom element to the user view page.
 */
function boilerplate_user_view($account, $view_mode, $langcode) {
  $account->content['boilerplate'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Boilerplate'),
    '#markup' => t('Your account ID is: @id', array('@id' => $account->uid)),
  );
}

/**
 * Implements hook_webform_select_options_info().
 * 
 * Defines a custom dropdown form element to be used with the Webform module.
 */
function boilerplate_webform_select_options_info() {
  $items['nodes'] = array(
    'title' => t('List of published nodes'),
    'options callback' => '_boilerplate_get_all_nodes',
  );
  
  return $items;
}

/**
 * Implements hook_skinr_api_VERSION().
 */
function boilerplate_skinr_api_2() {
  return array(
    'directory' => 'skins',
  );
}

/**
 * Sample function - send an email.
 */
function boilerplate_sample_send_email() {
  global $user;

  // Send email only if the user is logged in and allow to do this only once in
  // 1 hour as an anti-flood mechanism.
  if ($user->uid && flood_is_allowed('boilerplate_sample_send_email', 1)) {
    $account = user_load($user->uid);
    $values['sender']  = $account;
    $values['subject'] = 'Sample email subject';
    $values['message'] = 'Sample email body';
    $values['name']    = $account->name;

    // Send the default, text-only email.
    drupal_mail('boilerplate', 'sample_text_mail', 'email@to.com', language_default(), $values, 'email@from.com');

    // Send the rich, HTML email. Note: we have to switch to the HTML Mail System
    // and then back to the default one.
    variable_set('mail_system', array('default-system' => 'HTMLMailSystem'));
    drupal_mail('boilerplate', 'sample_html_mail', 'email@to.com', language_default(), $values, 'email@from.com');
    variable_set('mail_system', array('default-system' => 'DefaultMailSystem'));

    // Register a flood event, which will prevent mindless submissions. Second
    // parameter defines the window.
    flood_register_event('boilerplate_sample_send_email', 60 * 60);

    // Invoke our custom event.
    rules_invoke_event('boilerplate_email_is_sent', $account);

    // Register this event in the log.
    watchdog('mail', '%sender-name (@sender-from) sent an e-mail.', array(
      '%sender-name' => $values['name'],
      '@sender-from' => $account->mail
    ));
  }
}

/**
 * Sample function - caching usage.
 */
function boilerplate_sample_cached_data($reset = FALSE) {
  
  // Save data in a static variable for consecutive calls
  static $data;
  
  // If data is not set or reset is requested, regenerate.
  if (!isset($data) || $reset) {
    if (!$reset && ($cache = cache_get('boilerplate_sample_data')) && !empty($cache->data)) {
      $data = unserialize($cache->data);
    }
    else {
      // Regenerate the data. Place here any custom functions or queries to
      // perform resource intensive tasks.
      $data = array(1, 2, 3);
      // Save the data in cache; if it's an array serialize it
      // Last parameter is expiration; CACHE_PERMANENT, CACHE_TEMPORARY or
      // timestamp. In the case below, cache is set to 1 full day.
      cache_set('boilerplate_sample_data', serialize($data), 'cache', REQUEST_TIME + 1 * 24 * 60 * 60);
    }
  }
  
  return $data;
}

/**
 * Sample function - custom validation function for webform component.
 */
function _boilerplate_validate_webform($form) {
  foreach ($form['#node']->webform['components'] as $element_id => $element) {
    if ($element['form_key'] == 'sample_field') {
      if ($element['value'] != 'Sample value') {
        form_set_error('', t('Validation message.'));
      }
    }
  }
}

/**
 * Helper function - generate a random string.
 */
function _boilerplate_generate_random_string($length = 32) {
  $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';  
  $size  = strlen($chars);
  $str   = '';
  for ($i = 0; $i < $length; $i++) {
    $str .= $chars[rand(0, $size - 1)];
  }

  return $str;
}

/**
 * Helper function - get the list of all image styles on the site. For use in
 * administrative forms.
 */
function _boilerplate_get_image_styles() {
  $styles = array();
  $results = image_styles();
  foreach ($results as $result) {
    $styles[$result['name']] = $result['name'];
  }

  return $styles;
}

/**
 * Helper function - get the list of all users on the website. For use in
 * administrative forms.
 *
 * Optionally filter by a certain role.
 */
function _boilerplate_get_all_users($status = 1, $rids = NULL) {
  $users = array();
  $query = db_select('users', 'u')
    ->fields('u', array('uid', 'name'))
    ->condition('status', $status);
  if ($rids) {
    $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
    $query->leftJoin('role', 'r', 'r.rid = ur.rid');
    $query->condition('r.rid', $rids);
  }
  $results = $query->execute();
  foreach ($results as $result) {
    $users[$result->uid] = t('@name (ID: @uid)', array('@name' => $result->name, '@uid' => $result->uid));
  }

  return $users;
}

/**
 * Helper function - get the list of all roles on the website. For use in
 * administrative forms.
 */
function _boilerplate_get_roles() {
  $roles = array();
  $results = db_query("SELECT rid, name FROM {role} ORDER BY weight ASC");
  foreach ($results as $result) {
    $roles[$result->rid] = t('@name (ID: @rid)', array('@name' => ucfirst($result->name), '@rid' => $result->rid));
  }

  return $roles;
}

/**
 * Helper function - check if a user has certain role.
 */
function _boilerplate_check_if_user_has_role($rid, $uid = FALSE) {
  // If the uid is not passed, work with the current user.
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  $account = user_load($uid);

  return array_key_exists($rid, $account->roles);
}

/**
 * Helper function - get the list of all nodes of specific type. For use in
 * administrative forms.
 */
function _boilerplate_get_all_nodes($type = NULL, $status = NODE_PUBLISHED) {
  $query = db_select('node', 'n')
    ->addTag('node_access')
    ->fields('n', array('nid', 'title'))
    ->condition('status', $status)
    ->orderBy('title', 'ASC');
  if (!empty($type)) {
    $query->condition('type', $type);
  }
  $results = $query
    ->execute()
    ->fetchAll();
  $nodes = array();
  foreach ($results as $result) {
    $nodes[$result->nid] = t('@title (ID: @nid)', array('@title' => $result->title, '@nid' => $result->nid));
  }

  return $nodes;
}

/**
 * Helper function - get the list of all node types. For use in administrative
 * forms.
 */
function _boilerplate_get_all_node_types() {
  $types = array();
  $results = db_query("SELECT type, name FROM {node_type} ORDER BY name");
  foreach ($results as $result) {
    $types[$result->type] = t('@name (machine name: @machine_name)', array('@name' => $result->name, '@machine_name' => $result->type));
  }

  return $types;
}

/**
 * Helper function - get the list of all vocabularies. For use in administrative
 * forms.
 */
function _boilerplate_get_all_vocabularies() {
  $vocabularies = array();
  $results = db_query("SELECT vid, name FROM {taxonomy_vocabulary} ORDER BY weight ASC");
  foreach ($results as $result) {
    $vocabularies[$result->vid] = t('@vocabulary (ID: @vid)', array('@vocabulary' => $result->name, '@vid' => $result->vid));
  }

  return $vocabularies;
}

/**
 * Helper function - secure string comparison.
 *
 * Taken from HTTP Auth library of Zend Framework.
 * See http://stackoverflow.com/q/10576827/1520477 for discussion.
 */
function _boilerplate_secure_compare($a, $b) {
  if (strlen($a) !== strlen($b)) {
    return FALSE;
  }
  $result = 0;
  for ($i = 0; $i < strlen($a); $i++) {
    $result |= ord($a[$i]) ^ ord($b[$i]);
  }
  return $result == 0;
}

/**
 * Helper function - check if the current request is an AJAX request.
 */
function _boilerplate_is_ajax_request() {
  return !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
}

/**
 * Helper function - trim a string.
 */
function _boilerplate_trim_string_with_ellipsis($string, $length) {
  if (strlen($string) > $length) {
    $string = substr($string, 0, $length) . '&hellip;';
  }

  return $string;
}

/**
 * Modify the Drupal mail system to send HTML emails.
 *
 * In order to send HTML email instead of default, plain text emails, we have to
 * extend Drupal's MainSystemInterface class and provide our own way of
 * formatting the messages.
 * 
 * When we want to use HTML email parsing instead of the default one, we have to
 * temporarily switch to the HTML, send emails and then switch back to the 
 * default plain text parsing.
 * 
 * Example:
 * 
 *    variable_set('mail_system', array('default-system' => 'HTMLMailSystem'));
 *    drupal_mail('regular parameters go here');
 *    variable_set('mail_system', array('default-system' => 'DefaultMailSystem'));
 */
class HTMLMailSystem implements MailSystemInterface {

  /**
   * Concatenate and wrap the email body for plain-text mails.
   */
  public function format(array $message) {
    $message['body'] = implode("\n\n", $message['body']);
    return $message;
  }

  /**
   * Send an email message, using Drupal variables and default settings..
   */
  public function mail(array $message) {
    // If 'Return-Path' isn't already set in php.ini, we pass it separately
    // as an additional parameter instead of in the header.
    // However, if PHP's 'safe_mode' is on, this is not allowed.
    if (isset($message['headers']['Return-Path']) && !ini_get('safe_mode')) {
      $return_path_set = strpos(ini_get('sendmail_path'), ' -f');
      if (!$return_path_set) {
        $message['Return-Path'] = $message['headers']['Return-Path'];
        unset($message['headers']['Return-Path']);
      }
    }
    $mimeheaders = array();
    foreach ($message['headers'] as $name => $value) {
      $mimeheaders[] = $name . ': ' . mime_header_encode($value);
    }
    $line_endings = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
    // Prepare mail commands.
    $mail_subject = mime_header_encode($message['subject']);
    // Note: e-mail uses CRLF for line-endings. PHP's API requires LF
    // on Unix and CRLF on Windows. Drupal automatically guesses the
    // line-ending format appropriate for your system. If you need to
    // override this, adjust $conf['mail_line_endings'] in settings.php.
    $mail_body = preg_replace('@\r?\n@', $line_endings, $message['body']);
    // For headers, PHP's API suggests that we use CRLF normally,
    // but some MTAs incorrectly replace LF with CRLF. See #234403.
    $mail_headers = join("\n", $mimeheaders);

    // We suppress warnings and notices from mail() because of issues on some
    // hosts. The return value of this method will still indicate whether mail
    // was sent successfully.
    if (!isset($_SERVER['WINDIR']) && strpos($_SERVER['SERVER_SOFTWARE'], 'Win32') === FALSE) {
      if (isset($message['Return-Path']) && !ini_get('safe_mode')) {
        // On most non-Windows systems, the "-f" option to the sendmail command
        // is used to set the Return-Path. There is no space between -f and
        // the value of the return path.
        $mail_result = @mail(
          $message['to'],
          $mail_subject,
          $mail_body,
          $mail_headers,
          '-f' . $message['Return-Path']
        );
      }
      else {
        // The optional $additional_parameters argument to mail() is not
        // allowed if safe_mode is enabled. Passing any value throws a PHP
        // warning and makes mail() return FALSE.
        $mail_result = @mail(
          $message['to'],
          $mail_subject,
          $mail_body,
          $mail_headers
        );
      }
    }
    else {
      // On Windows, PHP will use the value of sendmail_from for the
      // Return-Path header.
      $old_from = ini_get('sendmail_from');
      ini_set('sendmail_from', $message['Return-Path']);
      $mail_result = @mail(
         $message['to'],
         $mail_subject,
         $mail_body,
         $mail_headers
       );
      ini_set('sendmail_from', $old_from);
    }

    return $mail_result;
  }

}
